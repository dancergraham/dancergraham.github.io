<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Graham Knapp's Blog</title><link href="https://grahamknapp.com/blog/" rel="alternate"></link><link href="https://grahamknapp.com/feed.xml" rel="self"></link><id>urn:uuid:8a477849-9042-3546-ad86-3566efc7fe93</id><updated>2025-02-10T00:00:00Z</updated><author><name></name></author><entry><title>AI coding patterns: Language bridging</title><link href="https://grahamknapp.com/blog/ai-coding-patterns-language-bridging/" rel="alternate"></link><updated>2025-02-10T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:adce3633-fecf-38df-8d43-1bd616153951</id><content type="html">&lt;p&gt;A pattern I enjoy with Copilot or other AI coding tools is something I'm calling "Language bridging":&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt; Language bridging &lt;/strong&gt;: Write code to solve a problem in a language you know well, then 
use an AI to translate the code into the language you want or need to use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="language_bridging.png" alt="A bridge between Python and Typescript"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LLMs help to bridge the gap between my knowledge of different programming languages&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;p&gt;The pattern looks like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write the code in Python (the programming language I know best)&lt;/li&gt;
&lt;li&gt;[Optional, recommended] Simplify the code, refactor into small functions, add comments&lt;/li&gt;
&lt;li&gt;Translate the code with an AI - I usually use Claude 3 at the moment.&lt;/li&gt;
&lt;li&gt;[Strongly recommended] Ask someone with better skills in the target language to carefully review the code.&lt;/li&gt;
&lt;li&gt;[Strongly recommended] Read the code line by line, identify one or two subjects to learn more about.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I find the refactoring and commenting stage improves the chances of success and makes it easier for me to understand the code after translation.&lt;/p&gt;
&lt;h3&gt;Use cases&lt;/h3&gt;
&lt;p&gt;I mainly use this for Proof Of Concept (POC) building, personal projects, one-off tools and for exploring ideas.  I don't find it efficient for general coding.&lt;/p&gt;
&lt;p&gt;I find it especially effective where I am combining a number of simple actions (cli commands, file parsing, data transformation, image manipulation, etc) in a custom way.  LLMs are often very good at these simple tasks and they can combine them much more quickly than me in a programming language I don't use regularly.&lt;/p&gt;
</content></entry><entry><title>Real developers</title><link href="https://grahamknapp.com/blog/real-developers/" rel="alternate"></link><updated>2025-02-08T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:8b266471-0b7c-3ad1-8cf7-88000cb6d45b</id><content type="html">&lt;p&gt;There's this myth we tell ourselves about &lt;em&gt;"Real developers"&lt;/em&gt; and especially &lt;em&gt;"this is why I am not a Real developer"&lt;/em&gt;. It got me thinking - is there actually a useful definition out there?&lt;/p&gt;
&lt;p&gt;Here is my best try:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;*A &lt;strong&gt;'Real Developer'&lt;/strong&gt; is someone who writes code or other instructions for a computer 
which run successfully and get something useful or delightful done in the real world&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This rules-out some computer science graduates and quite a few internet assholes who have not (yet) learned 
to write code which anybody regularly uses. It rules-in a lot of people who don't think of themselves as 
software developers but who actually write a lot of code or other software tools which they and their colleagues
use every day to get their job done.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgs.xkcd.com/comics/real_programmers.png" alt="Real programmers set the universal constants at the start such that the universe evolves to contain the disk with the data they want."&gt;&lt;/p&gt;
</content></entry><entry><title>2024 - My year in Open Source</title><link href="https://grahamknapp.com/blog/2024-my-year-in-open-source/" rel="alternate"></link><updated>2025-02-07T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:2ae11379-da9f-3159-a452-ca5717a7f142</id><content type="html">&lt;p&gt;&lt;a href="https://github.com/dancergraham?tab=overview&amp;amp;from=2024-01-01&amp;amp;to=2024-12-31"&gt;Looking back on 2024&lt;/a&gt; here are some personal highlights:&lt;/p&gt;
&lt;h3&gt;Maintaining an established pypi package üì¶&lt;/h3&gt;
&lt;p&gt;Early in 2024 I took over maintenance of the very useful &lt;a href="https://pypi.org/project/pye57/"&gt;Python package pye57&lt;/a&gt; for 
reading and writing e57 format pointcloud files. I have been using it at work for several years and was 
worried that it was not being maintained, blocking upgrade of our project to Python 3.11. 
I had already started working on an alternative library, cleverly titled &lt;code&gt;e57&lt;/code&gt; - essentially I got in touch with 
the project maintainer, providing some evidence that I was a real human being not a sham account, 
many thanks to David Caron for creating the library and maintaining it for so many years, and for trusting
me to carry it on.&lt;/p&gt;
&lt;p&gt;In the first 6 months 6 months I and other contributors ensured that pye57 now supports Python 11 and 12 
and macOS is now supported (on apple silicon only). There are 3 or 4 new contributors beside myself 
with a few bug fixes, quality of life improvements, photo writing, and an update to a more recent version of libe57Format
I closed 10+ issues and saw some engagement from past contributors in the issue tracker and PR comments. 
I once released broken wheels to pypi and reverted them within a few hours. Wheels are now tested in ci before release.&lt;/p&gt;
&lt;h3&gt;Joining Jazzband üé∂üé∑&lt;/h3&gt;
&lt;p&gt;Looking for a &lt;a href="../tags/feature-flags/"&gt;feature flags&lt;/a&gt; library I came across &lt;a href="https://waffle.readthedocs.io/en/stable/"&gt;Django Waffle&lt;/a&gt;, 
which looked good but the ci tests were a couple of versions behind and the docs were broken and 
looked sparse and outdated, including some references to Django version 1!
I started contributing and after a rough start getting up to speed with other contributors' expectations of git workflow and
PR etiquette I made 9 contributions, mostly around the documentation and testing. 
This gave me enough confidence to adopt the library at work and I'm very happy with it so far.&lt;/p&gt;
&lt;h3&gt;Meetups and events üìÖüçï&lt;/h3&gt;
&lt;p&gt;I continued contributing to the &lt;a href="https://www.meetup.com/nantes-python-meetup/"&gt;Nantes Python Meetup&lt;/a&gt;, kicking off some
collaborations with other meetups in Nantes and I went to the Nantes React meetup twice as well, which was very nice. 
Unfortunately I couldn't make it to &lt;a href="https://www.pycon.fr/2024/"&gt;PyCon France in 2024&lt;/a&gt; but I submitted a proposal for DjangoCon Europe at the 
end of 2024 and I'm very happy to have &lt;a href="https://pretalx.evolutio.pt/djangocon-europe-2025/talk/KNLFS8/"&gt;been accepted&lt;/a&gt; and looking forward to visiting Dublin for the first time in 20
years.&lt;/p&gt;
&lt;h3&gt;Advent of Code üéÑüßëüèª‚ÄçüéÑ&lt;/h3&gt;
&lt;p&gt;I found the motivation and skilz to &lt;a href="https://github.com/dancergraham/advent_of_code_2024/tree/main/advent_of_code_2024"&gt;solve roughly the first half&lt;/a&gt; of the puzzles in this year's event. I was less motivated than in previous years but there were some fun challenges in there.&lt;/p&gt;
&lt;h3&gt;Misc. ‚ÅâÔ∏è&lt;/h3&gt;
&lt;p&gt;A few other highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contributing HTTP Status Codes to the &lt;a href="https://github.com/joke2k/faker"&gt;Faker library&lt;/a&gt; having been surprised not to find them already in there.&lt;/li&gt;
&lt;li&gt;Maintaining my rust-backed &lt;a href="https://pypi.org/project/e57/"&gt;e57 Python library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Minor contribution to the upstream &lt;a href="https://crates.io/crates/e57"&gt;e57 rust library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adding e57 file support to a pointcloud visualisation library&lt;/li&gt;
&lt;li&gt;Adding the Result design pattern to my &lt;a href="https://github.com/dancergraham/HeadFirstDesignPatterns_python"&gt;Design Patterns repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>E57 file xml extractor</title><link href="https://grahamknapp.com/blog/e57-file-xml-tool/" rel="alternate"></link><updated>2025-01-26T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:beb0029f-73c0-39e8-b0e1-c18821683cef</id><content type="html">&lt;p&gt;See the xml portion from the end of an &lt;code&gt;.e57&lt;/code&gt; pointcloud file. This contains information like the bounding box of the
pointcloud, the number of points and how the points and other information are organised in the file.&lt;/p&gt;
&lt;p&gt;I wrote it with a bit of help from Claude ai by describing what I wanted and pasting a description of the e57 file
format before doing a lot of debugging to get the entire xml section and then integrating it with my blog.&lt;/p&gt;
&lt;p&gt;I find the e57 file format a bit &lt;em&gt;wierd&lt;/em&gt; - it starts with a header including a file version number and an offset to the XML portion, 
which comes at the &lt;em&gt;end&lt;/em&gt; of the file so you need to read both ends of the file before you can understand the middle bit. So 
if you download the file you have to wait for it to finish downloading - you can't start to interpret or display the 
points and other data whilst streaming data.&lt;/p&gt;
&lt;p&gt;This tool is written in JavaScript and runs in your browser - no files are uploaded to any server (in fact this blog has no backend server - it
is a static web site - it is downloaded and runs entirely in your browser).&lt;/p&gt;
&lt;p&gt;&lt;div id="file-upload"&gt;
    &lt;label&gt;
        Select E57 File
        &lt;input type="file" id="e57-input" accept=".e57" style="display:none;"&gt;
    &lt;/label&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div id="error" style="display:none;"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;pre id="xml-content" class="highlight"&gt;
&lt;/pre&gt;&lt;script&gt;
    document.getElementById('file-upload').addEventListener('click', () =&gt; {
        document.getElementById('e57-input').click();
    });

document.getElementById('e57-input').addEventListener('change', async (event) =&gt; {
        if (!event.target.files.length) {
            return;
        }
        const file = event.target.files[0];
        const errorDiv = document.getElementById('error');
        const xmlContentDiv = document.getElementById('xml-content');

        errorDiv.textContent = '';
        xmlContentDiv.textContent = '';

        try {
            const arrayBuffer = await file.arrayBuffer();
            const buffer = new Uint8Array(arrayBuffer);
            errorDiv.style.display = 'none';

            // Parse file header
            const fileHeader = {
                fileSignature: new TextDecoder().decode(buffer.slice(0, 8)),
                majorVersion: new DataView(buffer.buffer).getUint32(8, true),
                minorVersion: new DataView(buffer.buffer).getUint32(12, true),
                xmlPhysicalOffset: new DataView(buffer.buffer).getBigUint64(24, true)
            };

            // Validate file signature
            if (fileHeader.fileSignature !== 'ASTM-E57') {
                throw new Error('Not a valid E57 file');
            }

            // Extract XML section
            let xmlBytes = [];
            let offset = Number(fileHeader.xmlPhysicalOffset);

            while (offset &lt; buffer.length) {
                const pageStart = Math.floor(offset / 1024) * 1024;
                const pageEnd = Math.min(pageStart + 1020, buffer.length);  // Exclude 4-byte checksum
                const pageData = buffer.slice(pageStart, pageEnd);
                xmlBytes.push(...pageData.slice(offset % 1024));
                offset += (1024 - (offset % 1024));
            }
            // Convert XML bytes to string
            let xmlString = new TextDecoder().decode(new Uint8Array(xmlBytes));

            // Find the start of the XML declaration
            const xmlStart = xmlString.indexOf('&lt;?xml');
            if (xmlStart === -1) {
                throw new Error('No valid XML found');
            }

            // end at the first instance of &lt;/e57Root&gt;
            const xmlEnd = xmlString.indexOf('&lt;/e57Root&gt;');
            if (xmlEnd === -1) {
                throw new Error('No valid XML found');
            }

            xmlString = xmlString.slice(xmlStart, xmlEnd + 10);
            xmlContentDiv.textContent = xmlString;

        } catch (err) {
            errorDiv.textContent = err.message;
            errorDiv.style.display = 'block';
        } finally {
            event.target.value = '';
        }
    });

&lt;/script&gt;</content></entry><entry><title>Two's company, three's a crowd</title><link href="https://grahamknapp.com/blog/twos-company-threes-a-crowd/" rel="alternate"></link><updated>2025-01-20T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:ed6dbdec-ee81-39bb-a442-de84d4d63d18</id><content type="html">&lt;p&gt;My version of YAGNI - "You Ain't Gonna Need It" - is a rule of three: only spend time refactoring your code when you have repeated yourself 3 times. Don't aim for truly DRY code devoid of all repetition.&lt;/p&gt;
&lt;p&gt;I'm not saying not to apply SOLID design principles from the start - I definitely try to separate concerns, giving a single responsibility to a class or function and avoid, for instance, a single method handling file reading, data transformation and reporting.  This simplicity will make it much easier to refactor the code later.&lt;/p&gt;
&lt;p&gt;I am saying to avoid using sophisticated design patterns, architecture or abstractions before you have used of your code enough to know what is likely to change (and require encapsulation) and what will stay constant (creating a useful abstraction).&lt;/p&gt;
&lt;h2&gt;My recipe for success&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Write simple code, leaning on the &lt;strong&gt;S&lt;/strong&gt; from SOLID - separating code into small logical blocks&lt;/li&gt;
&lt;li&gt;When you find yourself repeating the same code 3 times, refactor it into a function or class&lt;/li&gt;
&lt;li&gt;Yes &lt;strong&gt;3.&lt;/strong&gt; When you have &lt;strong&gt;3&lt;/strong&gt; sufficiently different examples of the same pattern, reach for design patterns and modularisation.  Have fun. Don't be afraid to delete your existing code and start again using all you have learned. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;Solid design principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Design Patterns: elements of reusable object oriented software (Gang of Four)&lt;/li&gt;
&lt;li&gt;Head First Design Patterns : Standard reusable code patterns to help meet the solid principals&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wickedlysmart.com/head-first-design-patterns"&gt;Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dancergraham/HeadFirstDesignPatterns_python"&gt;Sample python code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://talkpython.fm/episodes/show/18/python-anti-patterns-and-other-mistakes"&gt;Podcast on anti-patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conlin Durbin makes a similar point for front-end code in his article &lt;a href="https://dev.to/wuz/stop-trying-to-be-so-dry-instead-write-everything-twice-wet-5g33"&gt;Stop trying to be so DRY, instead Write Everything Twice (WET)&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>The Zen of Python: Gur Mra bs Clguba.</title><link href="https://grahamknapp.com/blog/the-zen-of-python-revisited/" rel="alternate"></link><updated>2025-01-14T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:a01b967b-99e5-33ad-b4c3-761164a2cc3b</id><content type="html">&lt;p&gt;I love The Zen of Python - one of the delights of the language is typing &lt;code&gt;import this&lt;/code&gt; in a REPL and discovering this gem:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;The Zen of Python, by Tim Peters&lt;/span&gt;

&lt;span class="go"&gt;Beautiful is better than ugly.&lt;/span&gt;
&lt;span class="go"&gt;Explicit is better than implicit.&lt;/span&gt;
&lt;span class="go"&gt;Simple is better than complex.&lt;/span&gt;
&lt;span class="go"&gt;Complex is better than complicated.&lt;/span&gt;
&lt;span class="go"&gt;Flat is better than nested.&lt;/span&gt;
&lt;span class="go"&gt;Sparse is better than dense.&lt;/span&gt;
&lt;span class="go"&gt;Readability counts.&lt;/span&gt;
&lt;span class="go"&gt;Special cases aren&amp;#39;t special enough to break the rules.&lt;/span&gt;
&lt;span class="go"&gt;Although practicality beats purity.&lt;/span&gt;
&lt;span class="go"&gt;Errors should never pass silently.&lt;/span&gt;
&lt;span class="go"&gt;Unless explicitly silenced.&lt;/span&gt;
&lt;span class="go"&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/span&gt;
&lt;span class="go"&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/span&gt;
&lt;span class="go"&gt;Although that way may not be obvious at first unless you&amp;#39;re Dutch.&lt;/span&gt;
&lt;span class="go"&gt;Now is better than never.&lt;/span&gt;
&lt;span class="go"&gt;Although never is often better than *right* now.&lt;/span&gt;
&lt;span class="go"&gt;If the implementation is hard to explain, it&amp;#39;s a bad idea.&lt;/span&gt;
&lt;span class="go"&gt;If the implementation is easy to explain, it may be a good idea.&lt;/span&gt;
&lt;span class="go"&gt;Namespaces are one honking great idea -- let&amp;#39;s do more of those!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It neatly captures the way in which Guido van Rossum and a group of Pythonistas thought about 
the language, constructed and used it, sharing thoughts on user forums in in-person meetings.&lt;/p&gt;
&lt;p&gt;But I think it is particularly well paired with the &lt;a href="https://github.com/python/cpython/blob/main/Lib/this.py"&gt;&lt;em&gt;source code&lt;/em&gt;&lt;/a&gt; 
of this module, which is notable for breaking almost all of the suggestions from the poem
in a huge kludge of unreadable script with ROT-13 text and single-letter variable names:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Gur Mra bs Clguba, ol Gvz Crgref&lt;/span&gt;

&lt;span class="s2"&gt;Ornhgvshy vf orggre guna htyl.&lt;/span&gt;
&lt;span class="s2"&gt;Rkcyvpvg vf orggre guna vzcyvpvg.&lt;/span&gt;
&lt;span class="s2"&gt;Fvzcyr vf orggre guna pbzcyrk.&lt;/span&gt;
&lt;span class="s2"&gt;Pbzcyrk vf orggre guna pbzcyvpngrq.&lt;/span&gt;
&lt;span class="s2"&gt;Syng vf orggre guna arfgrq.&lt;/span&gt;
&lt;span class="s2"&gt;Fcnefr vf orggre guna qrafr.&lt;/span&gt;
&lt;span class="s2"&gt;Ernqnovyvgl pbhagf.&lt;/span&gt;
&lt;span class="s2"&gt;Fcrpvny pnfrf nera&amp;#39;g fcrpvny rabhtu gb oernx gur ehyrf.&lt;/span&gt;
&lt;span class="s2"&gt;Nygubhtu cenpgvpnyvgl orngf chevgl.&lt;/span&gt;
&lt;span class="s2"&gt;Reebef fubhyq arire cnff fvyragyl.&lt;/span&gt;
&lt;span class="s2"&gt;Hayrff rkcyvpvgyl fvyraprq.&lt;/span&gt;
&lt;span class="s2"&gt;Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff.&lt;/span&gt;
&lt;span class="s2"&gt;Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg.&lt;/span&gt;
&lt;span class="s2"&gt;Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh&amp;#39;er Qhgpu.&lt;/span&gt;
&lt;span class="s2"&gt;Abj vf orggre guna arire.&lt;/span&gt;
&lt;span class="s2"&gt;Nygubhtu arire vf bsgra orggre guna *evtug* abj.&lt;/span&gt;
&lt;span class="s2"&gt;Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg&amp;#39;f n onq vqrn.&lt;/span&gt;
&lt;span class="s2"&gt;Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.&lt;/span&gt;
&lt;span class="s2"&gt;Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg&amp;#39;f qb zber bs gubfr!&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content></entry><entry><title>Feature flags Pt 2: Start small</title><link href="https://grahamknapp.com/blog/feature-flags-pt-2-start-small/" rel="alternate"></link><updated>2025-01-05T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:a18ea485-2d68-3a6a-9c31-6722c0d71362</id><content type="html">&lt;p&gt;In our team we started with the smallest possible shareable system - a flags namespace in our front-end code. We later adopted an existing open source library in the back end.  This got me thinking - what is the smallest possible feature flag system?&lt;/p&gt;
&lt;p&gt;&lt;img src="640px-Britains_Deetail_Waterloo_British_Officer_with_Sword_and_Flag.jpg" alt="Britains Deetail Waterloo British Officer with Sword and Flag by Sclight"&gt;&lt;/p&gt;
&lt;p&gt;Here's a Hello World example...&lt;/p&gt;
&lt;h3&gt;The world without flags&lt;/h3&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# greet.py&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's test it:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;python -m greet&lt;/span&gt;
&lt;span class="go"&gt;Hello, world!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Add a flag&lt;/h3&gt;
&lt;p&gt;I have a great idea for a new flagship feature - the script will ask the user's name and greet them personally!&lt;/p&gt;
&lt;p&gt;What's the easiest way to add feature flags to a python script? 
For demonstration purposes we will just add a command line argument but this could be done 
with an environment variable or by looking at the user id or configuration.
We put the flag-specific code inside an if-statement and keep common code outside the flagged block:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# greet1.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;personal_flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;personal&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;personal_flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;greeted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What&amp;#39;s your name? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;greeted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;greeted&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's run this new feature up the flagpole and see who salutes:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;gt; python -m greet1&lt;/span&gt;
&lt;span class="go"&gt;Hello, world!&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt; python -m greet1 personal&lt;/span&gt;
&lt;span class="go"&gt;What&amp;#39;s your name? Graham&lt;/span&gt;
&lt;span class="go"&gt;Hello, Graham!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Remove the flag&lt;/h3&gt;
&lt;p&gt;I love this feature, the team loves it - we have tested it in production by activating the flag and our users love it too. 
Now it's time to remove the flag and tidy up the code:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# greet2.py&lt;/span&gt;
&lt;span class="n"&gt;greeted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What&amp;#39;s your name? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;greeted&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's much cleaner - glad I removed the feature flag!  Testing it...&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;gt; python -m greet2&lt;/span&gt;
&lt;span class="go"&gt;What&amp;#39;s your name? Graham&lt;/span&gt;
&lt;span class="go"&gt;Hello, Graham!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perfect!&lt;/p&gt;
</content></entry><entry><title>Feature flags Pt 1: Faster feature development with flags.</title><link href="https://grahamknapp.com/blog/feature-flags-pt-1-whats-so-great-about-feature-flags/" rel="alternate"></link><updated>2025-01-02T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:bab63207-6428-3f88-99ce-6d34656cbf8d</id><content type="html">&lt;p&gt;The greatest accelerator of my team's work last year was adopting feature flags. With flags we ship features faster, more confidently and with less stress. We have fewer merge conflicts despite frequently working together on the same part of the code base.&lt;/p&gt;
&lt;p&gt;&lt;img src="Sbandieratori_3.JPG" alt="Men in colourful mediaeval costumes throwing huge flags into the air in a central Italian flagged square, thousands of onlookers in the background"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Saracen Joust in Arezzo: Exhibition of the flag-wavers from Archivio Istituzione Giostra del Saracino del Comune di Arezzo&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this post I will share the advantages and potential pain points we have seen. For context we are a team of 5 developers working together on a back end api and front end web app for business users. We have moved towards &lt;strong&gt;trunk-based development&lt;/strong&gt;, avoiding long-running branches.&lt;/p&gt;
&lt;h3&gt;What are Feature Flags ?&lt;/h3&gt;
&lt;p&gt;A feature flag lets you turn parts of your code on or off for some or all users, or based on other conditions such as date, time, region, etc.&lt;/p&gt;
&lt;p&gt;‚úÖ In this post I am talking about short-lived flags used during development.&lt;/p&gt;
&lt;p&gt;‚ùå I am not talking about permanent aspects of your app such as customisations for individuals or groups of users.&lt;/p&gt;
&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fewer merge conflicts üéå&lt;/strong&gt;. This is the biggest plus: Hiding features which are incomplete or not yet launched behind a flag lets you merge more frequently safe in the knowledge that the new feature is not going to break existing code. By sharing more often, avoiding long-running branches, you hugely reduce the risk of big merge conflicts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Earlier collaboration üè≥Ô∏è‚Äçüåà&lt;/strong&gt;. Sharing your code earlier means you can start collaborating quickly with other developers, product, sales and designers. There is nothing better for discussion and collaboration than working code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Early feedback&lt;/strong&gt;. By turning on features for trusted customers and partners you can get early feedback on the design and functionality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Increased productivity&lt;/strong&gt;. All of this means you are shipping impactful changes earlier with less wasted effort. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pain points&lt;/h3&gt;
&lt;p&gt;Sounds too good to be true?  There is no such thing as a free lunch - here are some possible downsides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Upfront investment&lt;/strong&gt; It takes time to develop a feature flag system or adopt an external solution and you need to convince the team that the effort is worth it. I hope this blog post helps with that! Adopting feature flags may imply changes to your branching, code review, deployment and ci / cd system. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complexity&lt;/strong&gt; Each flag adds a new code path - be wary of layering complexity or nesting flags in complex ways. Creating, updating and deleting each flag takes time so do not add them unnecessarily for small features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Removal&lt;/strong&gt; At some point the flag code needs to be removed. Avoid keeping unused features behind deactivated flags or accepted features inside permanently active flags "just in case".&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Recommendations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start small&lt;/strong&gt; In our team we started with the smallest possible shareable system - a flags namespace in our front-end code. We later adopted an existing open source library in the back end.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work together&lt;/strong&gt;. Ensure that everyone is adopting the system where appropriate, discuss any challenges as a team and look for solutions. Change course as necessary. &lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Result pattern - An exceptional way to handle errors</title><link href="https://grahamknapp.com/blog/result-pattern-an-exceptional-way-to-handle-errors/" rel="alternate"></link><updated>2024-12-30T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:58972ab3-c316-3378-aac0-9567c94b810c</id><content type="html">&lt;p&gt;People often say that in Python you should use exceptions - "Easier to Ask Forgiveness than Permission" (EAFP) over guard clauses - "Look Before You Leap" (LBYL), but the Result design pattern - returning an object which explicitly states whether the operation succeeded is a useful alternative where error handling is required and, as I learned by exploring in more depth, it can be compatible with both approaches.&lt;/p&gt;
&lt;p&gt;As my &lt;a href="https://github.com/dancergraham/HeadFirstDesignPatterns_python"&gt;design patterns repo&lt;/a&gt; approaches &lt;code&gt;100‚≠ê&lt;/code&gt; on GitHub I decided to add the &lt;a href="https://github.com/dancergraham/HeadFirstDesignPatterns_python/tree/main/extra_result"&gt;Result design pattern&lt;/a&gt; to the mix&lt;/p&gt;
&lt;h2&gt;EAFP vs LBYL&lt;/h2&gt;
&lt;p&gt;or &lt;em&gt;Graham plays with GitHub Code Search&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Prompted by &lt;a href="https://fosstodon.org/@CodenameTim/113730836308245068"&gt;a post on Mastodon&lt;/a&gt;
I looked a bit more into which patterns people are using for error handling
specifically for attribute lookup: I'm surprised to see twice as many
references to &lt;a href="https://github.com/search?type=code&amp;amp;auto_enroll=true&amp;amp;q=hasattr+language%3APython"&gt;hasattr&lt;/a&gt;
as for &lt;a href="https://github.com/search?type=code&amp;amp;auto_enroll=true&amp;amp;q=except+AttributeError+language%3APython+"&gt;"except AttributeError"&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and not only for dynamic lookups but also for general attribute search, so a win for LBYL vs EAFP style with Python, despite the latter often being recommended ?&lt;/p&gt;
</content></entry><entry><title>City Modelling with Generative AI: Tool or toy?</title><link href="https://grahamknapp.com/blog/city-modelling-with-gen-ai/" rel="alternate"></link><updated>2023-01-02T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:69ec0cae-7c8d-3dcb-97e4-8ff500b973eb</id><content type="html">&lt;p&gt;AI tools such as Chat-Gpt (text generation) and Dall-E (image generation) are making impressive leaps, allowing people to rapidly generate text, code and images from simple input prompts. The next frontier in generative AI may be 3D modelling, and OpenAI recently released the open source 3D modelling software Point¬∑E. Could computer games, films and even architecture use these techniques to replace or improve manual city modelling?&lt;/p&gt;
&lt;p&gt;&lt;img src="33_3D_models.jpg" alt="33 3D mesh models, each generated from the text prompt &amp;quot;a buildng&amp;quot;‚Äã
"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;33 3D mesh models, each generated from the text prompt "a buildng"‚Äã&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Point¬∑E first uses a text to image diffusion model to generate a single image from a text prompt and then passes this image into a second diffusion model to create a 3D point cloud. And it is blazing quick compared to other approaches, creating a 3D point cloud from text in 2 minutes on the GPU of my laptop (a modest GeForce 1650). The provided code includes a method for converting the point cloud into a surface mesh. This works well for some models but struggles with fine details such as cables and grids.&lt;/p&gt;
&lt;p&gt;&lt;img src="building_mesh.jpg" alt="3D render of a tall square building with a pointed roof"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Polygon mesh model generated from the text prompt "a building"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So how does it cope with generating buildings? The results are mixed and, as with AI image generation, it is a good idea to create multiple images and choose between them. I'm quite impressed by the diversity of forms created from slender towers to simple cubes to domed structures.&lt;/p&gt;
&lt;p&gt;My early experiments suggest that Point¬∑E is best at creating individual "bounded" boxy objects such as round fruit, cars, etc. Long linear objects such as bridges seem to be harder as they can have indistinct start and end points and may be composed of slender elements which do not convert neatly to a polygon mesh.&lt;/p&gt;
&lt;p&gt;I downloaded the Python source code and used it to generate over 30 point clouds from the same input text "a building" and got a very wide range of results: all of these are shown in greyscale in the title image at the top of this page.&lt;/p&gt;
&lt;h3&gt;Curious colours&lt;/h3&gt;
&lt;p&gt;Rendered image of two buildings with blue-green walls and brown rooves
polygon mesh model generated from the text prompt "a building"
Whilst most of the generated buildings appear with sober colours : mostly grey, brown or tan, some have strange colour combinations with blue or green walls and, sometimes, red rooves. It looks like some additional colour prompting or recolouring the finished output may be needed.&lt;/p&gt;
&lt;h3&gt;Legal and ethical issues&lt;/h3&gt;
&lt;p&gt;The AI model is trained on a data set of models and images made by real people but the authors provide no information or guarantees on respect for copyright and licensing of the original works. Users should be made aware of the risks of bizarre or even dangerous (for some applications) outputs. Prejudice against and lack of representation of disadvantaged groups is likely to be present in available datasets and will probably appear in some form in the outputs, as it does with text and image generation techniques.&lt;/p&gt;
&lt;h3&gt;Tool or toy ?&lt;/h3&gt;
&lt;p&gt;I've had a lot of fun experimenting with this but could it be useful in the professional world? Clearly the results so far are pretty limited but here are some ideas for real-world use cases as the AI tech and associated tools develop:&lt;/p&gt;
&lt;p&gt;&lt;img src="building_pointcloud.jpg" alt="A tall yellow building with a white upper section in front of a green and blue strip"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;pointcloud generated from the text prompt "a building"&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Computer games and film designers could use these techniques to generate unique virtual worlds. Careful prompt selection, colouring and surface texture choices could create dramatic effects with limited human intervention. First draft storybook models could be largely AI generated.&lt;/li&gt;
&lt;li&gt;Architects and urban physicists could use generative AI to create surrounds models for buildings surrounding a new planned building or masterplan. Whilst some detail may be needed on the planned building, in some cases the surrounds are only needed to set the project in an urban context, often no 3D model is available for the surroundings and the actual building forms may not be required.&lt;/li&gt;
&lt;li&gt;Generative design can give inspiration or baseline models for professional cad modellers. This is particularly appealing because most 3D design software needs good quality graphics cards. Those graphics cards could be put to use overnight generating dozens or hundreds of candidate 3D models, which the modeller could select from for the following day's work; recombining, reworking and colouring the models, just as professional artists and illustrators today use Dall-E to assist their own artistic creation.&lt;/li&gt;
&lt;li&gt;Generating 3D models of real buildings from photos: Point¬∑E can be seeded from text or from an image.&lt;/li&gt;
&lt;li&gt;Generating 3D point clouds as inputs to train specialist classifiers. Specialist applications abound for point cloud scans and data sets are needed for testing and training purposes. Generative approaches could be useful here, particularly for simple classifiers which may not need very large training data sets.&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>üéºTrouver un musicoth√©rapeuteüéº</title><link href="https://grahamknapp.com/blog/trouver-un-musicotherapeute/" rel="alternate"></link><updated>2021-07-20T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:29c101d7-f1b0-374e-939e-48a411d2157f</id><content type="html">&lt;p&gt;Ma femme est non seulement une superbe musicienne mais aussi une musicoth√©rapeute : elle soigne les gens, ou les aide √† se soigner eux-m√™mes, avec de la musique!&lt;/p&gt;
&lt;p&gt;J'ai cr√©e cette &lt;a href="https://dancergraham.github.io/blog/trouver-un-musicotherapeute/musicotherapeutes.html"&gt;carte des musicoth√©rapeutes fran√ßais&lt;/a&gt; avec la m√©thode suivante:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scrape le &lt;a href="https://www.musicotherapie-federationfrancaise.com/trouver-un-musicotherapeute/"&gt;site web de la F√©d√©ration Fran√ßaise de Musicoth√©rapie&lt;/a&gt; avec Requests et Beautiful Soup&lt;/li&gt;
&lt;li&gt;G√©ocoder les addresses de tous les musicoth√©rapeutes via OSM (cette partie prend plusieurs minutes)&lt;/li&gt;
&lt;li&gt;Cr√©er une carte avec un marqueur par musicoth√©rapeute avec Folium.&lt;/li&gt;
&lt;li&gt;Enregistrer la carte sous format html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;J'utilise la fonction suivantes pour g√©n√©rer mes tags HTML pour les marqueurs:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tagged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voici &lt;a href="https://github.com/dancergraham/carte_musicotherapeutes"&gt;le script complet sous forme de Jupyter Notebook&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Aerodynamic Behaviour and Structural Safety of Tower Cranes</title><link href="https://grahamknapp.com/blog/wind-and-tower-cranes/" rel="alternate"></link><updated>2021-05-18T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:e6c676a9-4fb2-33dd-bed8-50e6c3981c58</id><content type="html">&lt;p&gt;Upon moving to work at the French national scientific research organisation for the built environment, CSTB, 
I was surprised to see the attention to detail in tower crane studies - looking at the risk of strong winds, construction site 
exposure and swirling winds potentially setting tower cranes rotating.&lt;/p&gt;
&lt;p&gt;Following some &lt;a href="https://www.linkedin.com/posts/windengineer_souffleries-atmosph%C3%A9riques-stabilit%C3%A9-des-activity-6498189400827138048-1ipc/"&gt;LinkedIn posts&lt;/a&gt; and academic articles on the subject I was invited by the UK Wind Engineering Society to give an online talk.
I gave some of the history of the subject, the key factors influencing risk levels and the methods used by the CSTB and
by French insurers to assess and reduce risk levels.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ice.org.uk/events/recorded-lectures/aerodynamic-behaviour-and-structural-safety-of-tower-cranes"&gt;üì∫Watch here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="cstb_slide.png" alt="Slide from the talk showing CFD streamlines illustrating wind flow between tall buildings and wind acceleration and sheltering behind the corner of a rectangular building"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.windengineering.org.uk/events/aerodynamic-behaviour-and-structural-safety-of-tower-cranes/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Abstract&lt;/h3&gt;
&lt;p&gt;The Lothar and Martin winter storms of 1999 were a wake-up call for the French construction industry : two particularly violent winter storms swept the country in the space of several days causing multiple tower cranes to collapse.&lt;/p&gt;
&lt;p&gt;This led to a long-term research project at the CSTB and a new methodology for the study of dynamic stability of tower cranes including desk study and wind tunnel analysis methods to identify and mitigate the risk of crane autorotation due to surrounding buildings and to quantify dynamic loads on the crane and its foundations. This method is underpinned by the national site-safety certification and insurance system.&lt;/p&gt;
&lt;p&gt;This talk covers the main technical considerations, the different techniques used as well as the legal framework in which it operates.&lt;/p&gt;
</content></entry><entry><title>Game of life in Rhino 3D</title><link href="https://grahamknapp.com/blog/game-of-life-in-rhino-3d/" rel="alternate"></link><updated>2020-12-18T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:154ac8b0-2905-3273-b590-0fac3bcc544c</id><content type="html">&lt;p&gt;Hello.&lt;/p&gt;
&lt;p&gt;Prompted by this year‚Äôs Advent Of Code challenge I have implemented a 3D version of the game of life in Python in Rhino 7.&lt;/p&gt;
&lt;p&gt;Here are some images renders from individual steps in my solution, followed by the code I used to generate them.&lt;/p&gt;
&lt;p&gt;&lt;img src="step-5.jpeg" alt="A rendered 3D image of dozens of white spheres, densely packed, against a white background"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="step-3.jpeg" alt="A rendered 3D image of dozens of white spheres, smaller and densely packed, against a white background"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="step-4.jpeg" alt="A rendered 3D image of dozens of white spheres, more sparsely packed, against a white background"&gt;&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rhinoscriptsyntax&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;rs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Rhino&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conway_cubes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rounds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnableRedraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Example from the puzzle&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;.#.&lt;/span&gt;
&lt;span class="s2"&gt;..#&lt;/span&gt;
&lt;span class="s2"&gt;###&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;new_cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Build the starting grid&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_cubes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Initialise sets and lists &lt;/span&gt;
    &lt;span class="n"&gt;old_spheres&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="c1"&gt;# 27 neighbours&lt;/span&gt;
    &lt;span class="n"&gt;neighbouring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="c1"&gt;# a cube is not its own neighbour&lt;/span&gt;
    &lt;span class="n"&gt;neighbouring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rounds&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_cubes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteObjects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_spheres&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;neighbours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;old_spheres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="c1"&gt;# Draw cubes and identify neighbours&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cube&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cubes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;old_spheres&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddSphere&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;neighbouring&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;neighbours&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                            &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                            &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                            &lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;new_cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Redraw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Create cubes for next round&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;neighbours&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cubes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;new_cubes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_cubes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnableRedraw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;conway_cubes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content></entry><entry><title>RhinoPython: may the source be with you!</title><link href="https://grahamknapp.com/blog/rhinopython-may-the-source-be-with-you/" rel="alternate"></link><updated>2019-05-12T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:54288fb4-f32c-31d7-a07a-d45b44dfb8ee</id><content type="html">&lt;p&gt;Hello everyone,&lt;/p&gt;
&lt;p&gt;I wrote a script to help me code in python and learn RhinoCommon and decided to share it with you üòú&lt;/p&gt;
&lt;p&gt;As you may know, the rhinoscriptsyntax library is written in Python and uses rhinocommon functions, also in Python, under the hood. In order to look up the underlying code you can open up the full python file, you can use the inspect module or you can save the script below to your computer and run it each time you want to look up a particular function. For instance if you search for ‚Äòbounding‚Äô you get the following options:&lt;/p&gt;
&lt;p&gt;&lt;img src="rhinopython_source_0.png" alt="Search and select dialog box for library function"&gt;&lt;/p&gt;
&lt;p&gt;And by clicking on the 3rd option you get the underlying source code, which you can read in the box, copy elsewhere, ‚Ä¶&lt;/p&gt;
&lt;p&gt;&lt;img src="rhinopython_source_1.png" alt="Source code view for library function"&gt;&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getsource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getmembers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isfunction&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rhinoscriptsyntax&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;rs&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Script to view the source code for rhinoscript &lt;/span&gt;
&lt;span class="sd"&gt;modules in Rhino 5 + 6 By Graham Knapp for personal &lt;/span&gt;
&lt;span class="sd"&gt;use and for the McNeel Discourse forums&lt;/span&gt;
&lt;span class="sd"&gt;13/6/2019&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_source&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;search_term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Function name to search for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rhinoscriptsyntax&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;search_term&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="c1"&gt;# (tuples of name, fuction)&lt;/span&gt;
    &lt;span class="n"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;getmembers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                 &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;search_term&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                          &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rhinoscriptsyntax&amp;#39;&lt;/span&gt;
                          &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;the_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getsource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;box_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EditBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Press OK to copy to clipboard&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Use the source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;box_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClipboardText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;box_result&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;get_source&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content></entry><entry><title>Here comes the sun</title><link href="https://grahamknapp.com/blog/here-comes-the-sun/" rel="alternate"></link><updated>2019-03-23T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:80c97444-4748-3939-b2af-fd2d0399a5e6</id><content type="html">&lt;p&gt;I spend too much of my life sitting alone in an office working on my conputer or looking at my smartphone. My regular dose of fresh air comes from my bike - I ride to work and back regularly - but I also enjoy getting out into the garden when I can. Trouble is, I dont really &lt;em&gt;enjoy&lt;/em&gt; gardening! I do get a lot  of satisfaction from pruning the trees and shrubs, especially if it involves some climbing and as a result we now have an enormous pile of branches, leaves and twigs in the bottom of the garden. I recently found a new activity which satisfies my creative side and starts to diminish the stack o' cuttings : building 'dead hedge' style walls and fences.&lt;/p&gt;
&lt;p&gt;&lt;img src="garden03.png" alt="garden03"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="garden02.png" alt="garden02"&gt;&lt;/p&gt;
&lt;p&gt;First I sharpen a set of stakes and drive them into the ground, then I weave branches beween the stakes and finally I stuff twigs and leaves between the branches.  I always end up full of splinters with a big grin on my face.&lt;/p&gt;
&lt;p&gt;&lt;img src="garden04.png" alt="garden04"&gt;&lt;/p&gt;
&lt;h2&gt;Before and after&lt;/h2&gt;
&lt;p&gt;&lt;img src="garden05.png" alt="garden05"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="garden06.png" alt="garden06"&gt;&lt;/p&gt;
</content></entry><entry><title>Any way the wind blows</title><link href="https://grahamknapp.com/blog/any-way-the-wind-blows/" rel="alternate"></link><updated>2019-03-20T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:4255ed85-1019-3014-9501-6dcdb09ead67</id><content type="html">&lt;h3&gt;Adding leading zeros with Python&lt;/h3&gt;
&lt;p&gt;Various ways to add leading zeros to a number, for instance a wind direction, using Python.  &lt;a href="wind_zeros.ipynb"&gt;Available as a Jupyter Notebook&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Generate a list of wind directions&lt;/h3&gt;
&lt;p&gt;First some definitions. The wind direction is measured in degrees clockwise from north and represents the direction the wind is blowing &lt;strong&gt;from&lt;/strong&gt;. For instance an easterly wind, i.e. wind blowing &lt;strong&gt;from&lt;/strong&gt; the east has a direction of 90 degrees. Let's generate 16 wind directions from 0 (north) to 337.5 (north by northwest).&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;22.5&lt;/span&gt;  &lt;span class="c1"&gt;# degrees&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;directions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[0.0,&lt;/span&gt;
&lt;span class="go"&gt; 22.5,&lt;/span&gt;
&lt;span class="go"&gt; 45.0,&lt;/span&gt;
&lt;span class="go"&gt; 67.5,&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt; 337.5]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;String zfill method&lt;/h3&gt;
&lt;p&gt;No doubt the most pythonic way to add leading zeros to a bare string, the built-in &lt;code&gt;str.zfill()&lt;/code&gt; method is designed to do just that.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dir_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;    000 000.0&lt;/span&gt;
&lt;span class="go"&gt;    022 022.5&lt;/span&gt;
&lt;span class="go"&gt;    045 045.0&lt;/span&gt;
&lt;span class="go"&gt;    067 067.5&lt;/span&gt;
&lt;span class="go"&gt;    090 090.0&lt;/span&gt;
&lt;span class="go"&gt;    112 112.5&lt;/span&gt;
&lt;span class="go"&gt;    135 135.0&lt;/span&gt;
&lt;span class="go"&gt;    157 157.5&lt;/span&gt;
&lt;span class="go"&gt;    180 180.0&lt;/span&gt;
&lt;span class="go"&gt;    202 202.5&lt;/span&gt;
&lt;span class="go"&gt;    225 225.0&lt;/span&gt;
&lt;span class="go"&gt;    247 247.5&lt;/span&gt;
&lt;span class="go"&gt;    270 270.0&lt;/span&gt;
&lt;span class="go"&gt;    292 292.5&lt;/span&gt;
&lt;span class="go"&gt;    315 315.0&lt;/span&gt;
&lt;span class="go"&gt;    337 337.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can immediately see our first quirk: the integer representation truncates decimal values rather than rounding up (as I learned to do at school) or rounding towards the nearest even number (&lt;a href="https://realpython.com/python-rounding/"&gt;as the Python round() funtion would do&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;String slicing&lt;/h3&gt;
&lt;p&gt;Very fast and arguably even more readable for people with a good understanding of basic python syntax but no desire to read the docs or explore the obscure corners of the language. Add the maximum possible number of leading zeros and then slice the desired number of digits.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)))[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;    000 000.0&lt;/span&gt;
&lt;span class="go"&gt;    022 022.5&lt;/span&gt;
&lt;span class="go"&gt;    045 045.0&lt;/span&gt;
&lt;span class="go"&gt;    067 067.5&lt;/span&gt;
&lt;span class="go"&gt;    090 090.0&lt;/span&gt;
&lt;span class="go"&gt;    112 112.5&lt;/span&gt;
&lt;span class="go"&gt;    135 135.0&lt;/span&gt;
&lt;span class="go"&gt;    157 157.5&lt;/span&gt;
&lt;span class="go"&gt;    180 180.0&lt;/span&gt;
&lt;span class="go"&gt;    202 202.5&lt;/span&gt;
&lt;span class="go"&gt;    225 225.0&lt;/span&gt;
&lt;span class="go"&gt;    247 247.5&lt;/span&gt;
&lt;span class="go"&gt;    270 270.0&lt;/span&gt;
&lt;span class="go"&gt;    292 292.5&lt;/span&gt;
&lt;span class="go"&gt;    315 315.0&lt;/span&gt;
&lt;span class="go"&gt;    337 337.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;String format : integers&lt;/h3&gt;
&lt;p&gt;As part of a longer string this allows the  number to be inserted with leading zeros. Compatible with all current versions of Python.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Int: &lt;/span&gt;&lt;span class="si"&gt;{:03d}&lt;/span&gt;&lt;span class="s1"&gt; | Float: &lt;/span&gt;&lt;span class="si"&gt;{:05.1f}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;  Int: 000  |  Float: 000.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 022  |  Float: 022.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 045  |  Float: 045.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 067  |  Float: 067.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 090  |  Float: 090.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 112  |  Float: 112.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 135  |  Float: 135.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 157  |  Float: 157.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 180  |  Float: 180.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 202  |  Float: 202.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 225  |  Float: 225.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 247  |  Float: 247.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 270  |  Float: 270.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 292  |  Float: 292.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 315  |  Float: 315.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 337  |  Float: 337.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;F Strings&lt;/h3&gt;
&lt;p&gt;From Python 3.6 this is even terser.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dir_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Int: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;03d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; | Float: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;05.1f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;  Int: 000  |  Float: 000.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 022  |  Float: 022.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 045  |  Float: 045.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 067  |  Float: 067.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 090  |  Float: 090.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 112  |  Float: 112.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 135  |  Float: 135.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 157  |  Float: 157.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 180  |  Float: 180.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 202  |  Float: 202.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 225  |  Float: 225.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 247  |  Float: 247.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 270  |  Float: 270.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 292  |  Float: 292.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 315  |  Float: 315.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 337  |  Float: 337.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Class&lt;/h3&gt;
&lt;p&gt;By overloading the built-in &lt;code&gt;__str__()&lt;/code&gt; method for the class we can create our own custom string representation of the value.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Wind direction: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;05.1f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; ¬∞&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WindRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;    Wind direction: 000.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 022.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 045.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 067.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 090.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 112.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 135.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 157.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 180.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 202.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 225.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 247.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 270.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 292.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 315.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 337.5 ¬∞&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://discourse.mcneel.com/u/clement/summary"&gt;@clement&lt;/a&gt; for comments&lt;/p&gt;
</content></entry><entry><title>Building a blog</title><link href="https://grahamknapp.com/blog/first-post/" rel="alternate"></link><updated>2019-03-18T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:248517bf-f16c-35e9-b4f6-153079fe67aa</id><content type="html">&lt;p&gt;I have had a few ideas for content to share recently and wanted a good way to do so.  I wanted to find a good solution for blog publishing with a few criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Built using Python, editable in markdown so I can develop my skills.&lt;/li&gt;
&lt;li&gt;Simple to build and maintain - I am not a web developer and have no desire to become one.  That said, I have been &lt;a href="https://web.archive.org/web/20010520155249/http://www.fortunecity.co.uk/madchester/latin/336/"&gt;building websites&lt;/a&gt; on an amateur basis &lt;a href="https://web.archive.org/web/19981202092552/http://www.shef.ac.uk/uni/union/susoc/ftc/"&gt;since the 1990s&lt;/a&gt; so I'm not afraid of writing a little html if I have to.&lt;/li&gt;
&lt;li&gt;Capable of incorporating Jupyter Notebooks&lt;/li&gt;
&lt;li&gt;Simple to deploy, preferably for free.  I am hoping to do this via my internet provider but might go via GitHub failing that or even pay for a small cloud server.&lt;/li&gt;
&lt;li&gt;No initial need for interractive content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I saw that the static site generators Pelican and Lektor were available.  That sounds like a good solution as it should be quick and have few moving parts which could break.  &lt;a href="https://www.getlektor.com/"&gt;Lektor&lt;/a&gt; looked simple, welcoming and modern enough so I downloaded and installed it. I listened to &lt;a href="https://talkpython.fm/episodes/show/160/lektor-beautiful-websites-out-of-flat-files"&gt;Talk Python episode 160&lt;/a&gt; as I did so and that encouraged me that I was on a good path.&lt;/p&gt;
&lt;blockquote&gt;&lt;audio preload="none" controls="" id="direct_player"&gt;
                                    &lt;source src="https://talkpython.fm/episodes/download/160/lektor-beautiful-websites-out-of-flat-files.mp3" type="audio/mpeg"&gt;
                                &lt;/audio&gt;&lt;p&gt;&lt;em&gt;Listen to Talk Python Episode 160 - Lektor (2018)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My initial experience has been great - I got going with no problem except that at the time of writing I have been waiting over a week for free to get around to setting up my personal web space so I can deploy the site.  At least that has given me enough time to configure a basic blog and write my first 2 posts.&lt;/p&gt;
&lt;h4&gt;Post-deployment update&lt;/h4&gt;
&lt;p&gt;OK so I have gone for GitHub pages for hosting with a custom web domain - buying the domain name and &lt;a href="https://www.getlektor.com/docs/deployment/ghpages/#cname-support"&gt;specifying it in Lektor&lt;/a&gt; and &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site"&gt;in GitHub pages&lt;/a&gt; was enough to get it working properly with https - no need to update certificates every few months !&lt;/p&gt;
</content></entry></feed>