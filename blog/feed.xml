<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Graham Knapp's Blog</title><link href="https://grahamknapp.com/blog/" rel="alternate"></link><link href="https://grahamknapp.com/blog/feed.xml" rel="self"></link><id>urn:uuid:8a477849-9042-3546-ad86-3566efc7fe93</id><updated>2025-01-05T00:00:00Z</updated><author><name></name></author><entry><title>Feature flags Pt 2: Start small</title><link href="https://grahamknapp.com/blog/feature-flags-pt-2-start-small/" rel="alternate"></link><updated>2025-01-05T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:a18ea485-2d68-3a6a-9c31-6722c0d71362</id><content type="html">&lt;p&gt;In our team we started with the smallest possible shareable system - a flags namespace in our front-end code. We later adopted an existing open source library in the back end.  This got me thinking - what is the smallest possible feature flag system?&lt;/p&gt;
&lt;p&gt;&lt;img src="640px-Britains_Deetail_Waterloo_British_Officer_with_Sword_and_Flag.jpg" alt="Britains Deetail Waterloo British Officer with Sword and Flag by Sclight"&gt;&lt;/p&gt;
&lt;p&gt;Here's a Hello World example...&lt;/p&gt;
&lt;h3&gt;The world without flags&lt;/h3&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# greet.py&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's test it:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;python -m greet&lt;/span&gt;
&lt;span class="go"&gt;Hello, world!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Add a flag&lt;/h3&gt;
&lt;p&gt;I have a great idea for a new flagship feature - the script will ask the user's name and greet them personally!&lt;/p&gt;
&lt;p&gt;What's the easiest way to add feature flags to a python script? 
For demonstration purposes we will just add a command line argument but this could be done 
with an environment variable or by looking at the user id or configuration.
We put the flag-specific code inside an if-statement and keep common code outside the flagged block:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# greet1.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;personal_flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;personal&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;personal_flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;greeted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What&amp;#39;s your name? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;greeted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;greeted&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's run this new feature up the flagpole and see who salutes:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;gt; python -m greet1&lt;/span&gt;
&lt;span class="go"&gt;Hello, world!&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt; python -m greet1 personal&lt;/span&gt;
&lt;span class="go"&gt;What&amp;#39;s your name? Graham&lt;/span&gt;
&lt;span class="go"&gt;Hello, Graham!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Remove the flag&lt;/h3&gt;
&lt;p&gt;I love this feature, the team loves it - we have tested it in production by activating the flag and our users love it too. 
Now it's time to remove the flag and tidy up the code:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# greet2.py&lt;/span&gt;
&lt;span class="n"&gt;greeted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What&amp;#39;s your name? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;greeted&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's much cleaner - glad I removed the feature flag!  Testing it...&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;gt; python -m greet2&lt;/span&gt;
&lt;span class="go"&gt;What&amp;#39;s your name? Graham&lt;/span&gt;
&lt;span class="go"&gt;Hello, Graham!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perfect!&lt;/p&gt;
</content></entry><entry><title>Feature flags Pt 1: Faster feature development with flags.</title><link href="https://grahamknapp.com/blog/feature-flags-pt-1-whats-so-great-about-feature-flags/" rel="alternate"></link><updated>2025-01-02T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:bab63207-6428-3f88-99ce-6d34656cbf8d</id><content type="html">&lt;p&gt;The greatest accelerator of my team's work last year was adopting feature flags. With flags we ship features faster, more confidently and with less stress. We have fewer merge conflicts despite frequently working together on the same part of the code base.&lt;/p&gt;
&lt;p&gt;&lt;img src="Sbandieratori_3.JPG" alt="Men in colourful mediaeval costumes throwing huge flags into the air in a central Italian flagged square, thousands of onlookers in the background"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Saracen Joust in Arezzo: Exhibition of the flag-wavers from Archivio Istituzione Giostra del Saracino del Comune di Arezzo&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this post I will share the advantages and potential pain points we have seen. For context we are a team of 5 developers working together on a back end api and front end web app for business users. We have moved towards &lt;strong&gt;trunk-based development&lt;/strong&gt;, avoiding long-running branches.&lt;/p&gt;
&lt;h3&gt;What are Feature Flags ?&lt;/h3&gt;
&lt;p&gt;A feature flag lets you turn parts of your code on or off for some or all users, or based on other conditions such as date, time, region, etc.&lt;/p&gt;
&lt;p&gt;‚úÖ In this post I am talking about short-lived flags used during development.&lt;/p&gt;
&lt;p&gt;‚ùå I am not talking about permanent aspects of your app such as customisations for individuals or groups of users.&lt;/p&gt;
&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fewer merge conflicts üéå&lt;/strong&gt;. This is the biggest plus: Hiding features which are incomplete or not yet launched behind a flag lets you merge more frequently safe in the knowledge that the new feature is not going to break existing code. By sharing more often, avoiding long-running branches, you hugely reduce the risk of big merge conflicts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Earlier collaboration üè≥Ô∏è‚Äçüåà&lt;/strong&gt;. Sharing your code earlier means you can start collaborating quickly with other developers, product, sales and designers. There is nothing better for discussion and collaboration than working code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Early feedback&lt;/strong&gt;. By turning on features for trusted customers and partners you can get early feedback on the design and functionality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Increased productivity&lt;/strong&gt;. All of this means you are shipping impactful changes earlier with less wasted effort. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pain points&lt;/h3&gt;
&lt;p&gt;Sounds too good to be true?  There is no such thing as a free lunch - here are some possible downsides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Upfront investment&lt;/strong&gt; It takes time to develop a feature flag system or adopt an external solution and you need to convince the team that the effort is worth it. I hope this blog post helps with that! Adopting feature flags may imply changes to your branching, code review, deployment and ci / cd system. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complexity&lt;/strong&gt; Each flag adds a new code path - be wary of layering complexity or nesting flags in complex ways. Creating, updating and deleting each flag takes time so do not add them unnecessarily for small features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Removal&lt;/strong&gt; At some point the flag code needs to be removed. Avoid keeping unused features behind deactivated flags or accepted features inside permanently active flags "just in case".&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Recommendations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start small&lt;/strong&gt; In our team we started with the smallest possible shareable system - a flags namespace in our front-end code. We later adopted an existing open source library in the back end.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work together&lt;/strong&gt;. Ensure that everyone is adopting the system where appropriate, discuss any challenges as a team and look for solutions. Change course as necessary. &lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Result pattern - An exceptional way to handle errors</title><link href="https://grahamknapp.com/blog/result-pattern-an-exceptional-way-to-handle-errors/" rel="alternate"></link><updated>2024-12-30T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:58972ab3-c316-3378-aac0-9567c94b810c</id><content type="html">&lt;p&gt;People often say that in Python you should use exceptions - "Easier to Ask Forgiveness than Permission" (EAFP) over guard clauses - "Look Before You Leap" (LBYL), but the Result design pattern - returning an object which explicitly states whether the operation succeeded is a useful alternative where error handling is required and, as I learned by exploring in more depth, it can be compatible with both approaches.&lt;/p&gt;
&lt;p&gt;As my &lt;a href="https://github.com/dancergraham/HeadFirstDesignPatterns_python"&gt;design patterns repo&lt;/a&gt; approaches &lt;code&gt;100‚≠ê&lt;/code&gt; on GitHub I decided to add the &lt;a href="https://github.com/dancergraham/HeadFirstDesignPatterns_python/tree/main/extra_result"&gt;Result design pattern&lt;/a&gt; to the mix&lt;/p&gt;
&lt;h2&gt;EAFP vs LBYL&lt;/h2&gt;
&lt;p&gt;or &lt;em&gt;Graham plays with GitHub Code Search&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Prompted by &lt;a href="https://fosstodon.org/@CodenameTim/113730836308245068"&gt;a post on Mastodon&lt;/a&gt;
I looked a bit more into which patterns people are using for error handling
specifically for attribute lookup: I'm surprised to see twice as many
references to &lt;a href="https://github.com/search?type=code&amp;amp;auto_enroll=true&amp;amp;q=hasattr+language%3APython"&gt;hasattr&lt;/a&gt;
as for &lt;a href="https://github.com/search?type=code&amp;amp;auto_enroll=true&amp;amp;q=except+AttributeError+language%3APython+"&gt;"except AttributeError"&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and not only for dynamic lookups but also for general attribute search, so a win for LBYL vs EAFP style with Python, despite the latter often being recommended ?&lt;/p&gt;
</content></entry><entry><title>üéºTrouver un musicoth√©rapeuteüéº</title><link href="https://grahamknapp.com/blog/trouver-un-musicotherapeute/" rel="alternate"></link><updated>2021-07-20T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:29c101d7-f1b0-374e-939e-48a411d2157f</id><content type="html">&lt;p&gt;Ma femme est non seulement une superbe musicienne mais aussi une musicoth√©rapeute : elle soigne les gens, ou les aide √† se soigner eux-m√™mes, avec de la musique!&lt;/p&gt;
&lt;p&gt;J'ai cr√©e cette &lt;a href="https://dancergraham.github.io/blog/trouver-un-musicotherapeute/musicotherapeutes.html"&gt;carte des musicoth√©rapeutes fran√ßais&lt;/a&gt; avec la m√©thode suivante:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scrape le &lt;a href="https://www.musicotherapie-federationfrancaise.com/trouver-un-musicotherapeute/"&gt;site web de la F√©d√©ration Fran√ßaise de Musicoth√©rapie&lt;/a&gt; avec Requests et Beautiful Soup&lt;/li&gt;
&lt;li&gt;G√©ocoder les addresses de tous les musicoth√©rapeutes via OSM (cette partie prend plusieurs minutes)&lt;/li&gt;
&lt;li&gt;Cr√©er une carte avec un marqueur par musicoth√©rapeute avec Folium.&lt;/li&gt;
&lt;li&gt;Enregistrer la carte sous format html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;J'utilise la fonction suivantes pour g√©n√©rer mes tags HTML pour les marqueurs:&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tagged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voici &lt;a href="https://github.com/dancergraham/carte_musicotherapeutes"&gt;le script complet sous forme de Jupyter Notebook&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Game of life in Rhino 3D</title><link href="https://grahamknapp.com/blog/game-of-life-in-rhino-3d/" rel="alternate"></link><updated>2020-12-18T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:154ac8b0-2905-3273-b590-0fac3bcc544c</id><content type="html">&lt;p&gt;Hello.&lt;/p&gt;
&lt;p&gt;Prompted by this year‚Äôs Advent Of Code challenge I have implemented a 3D version of the game of life in Python in Rhino 7.&lt;/p&gt;
&lt;p&gt;Here are some images renders from individual steps in my solution, followed by the code I used to generate them.&lt;/p&gt;
&lt;p&gt;&lt;img src="step-5.jpeg" alt="A rendered 3D image of dozens of white spheres, densely packed, against a white background"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="step-3.jpeg" alt="A rendered 3D image of dozens of white spheres, smaller and densely packed, against a white background"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="step-4.jpeg" alt="A rendered 3D image of dozens of white spheres, more sparsely packed, against a white background"&gt;&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rhinoscriptsyntax&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;rs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Rhino&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conway_cubes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rounds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnableRedraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Example from the puzzle&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;.#.&lt;/span&gt;
&lt;span class="s2"&gt;..#&lt;/span&gt;
&lt;span class="s2"&gt;###&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;new_cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Build the starting grid&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_cubes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Initialise sets and lists &lt;/span&gt;
    &lt;span class="n"&gt;old_spheres&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="c1"&gt;# 27 neighbours&lt;/span&gt;
    &lt;span class="n"&gt;neighbouring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="c1"&gt;# a cube is not its own neighbour&lt;/span&gt;
    &lt;span class="n"&gt;neighbouring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rounds&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_cubes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteObjects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_spheres&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;neighbours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;old_spheres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="c1"&gt;# Draw cubes and identify neighbours&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cube&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cubes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;old_spheres&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddSphere&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;neighbouring&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;neighbours&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                            &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                            &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                            &lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;new_cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Redraw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Create cubes for next round&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;neighbours&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cubes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;new_cubes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_cubes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnableRedraw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;conway_cubes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content></entry><entry><title>RhinoPython: may the source be with you!</title><link href="https://grahamknapp.com/blog/rhinopython-may-the-source-be-with-you/" rel="alternate"></link><updated>2019-05-12T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:54288fb4-f32c-31d7-a07a-d45b44dfb8ee</id><content type="html">&lt;p&gt;Hello everyone,&lt;/p&gt;
&lt;p&gt;I wrote a script to help me code in python and learn RhinoCommon and decided to share it with you üòú&lt;/p&gt;
&lt;p&gt;As you may know, the rhinoscriptsyntax library is written in Python and uses rhinocommon functions, also in Python, under the hood. In order to look up the underlying code you can open up the full python file, you can use the inspect module or you can save the script below to your computer and run it each time you want to look up a particular function. For instance if you search for ‚Äòbounding‚Äô you get the following options:&lt;/p&gt;
&lt;p&gt;&lt;img src="rhinopython_source_0.png" alt="Search and select dialog box for library function"&gt;&lt;/p&gt;
&lt;p&gt;And by clicking on the 3rd option you get the underlying source code, which you can read in the box, copy elsewhere, ‚Ä¶&lt;/p&gt;
&lt;p&gt;&lt;img src="rhinopython_source_1.png" alt="Source code view for library function"&gt;&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getsource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getmembers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isfunction&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rhinoscriptsyntax&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;rs&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Script to view the source code for rhinoscript &lt;/span&gt;
&lt;span class="sd"&gt;modules in Rhino 5 + 6 By Graham Knapp for personal &lt;/span&gt;
&lt;span class="sd"&gt;use and for the McNeel Discourse forums&lt;/span&gt;
&lt;span class="sd"&gt;13/6/2019&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_source&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;search_term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Function name to search for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rhinoscriptsyntax&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;search_term&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="c1"&gt;# (tuples of name, fuction)&lt;/span&gt;
    &lt;span class="n"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;getmembers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                 &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;search_term&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                          &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rhinoscriptsyntax&amp;#39;&lt;/span&gt;
                          &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;the_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getsource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;box_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EditBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Press OK to copy to clipboard&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Use the source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;box_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClipboardText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;box_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;box_result&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;get_source&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content></entry><entry><title>Here comes the sun</title><link href="https://grahamknapp.com/blog/here-comes-the-sun/" rel="alternate"></link><updated>2019-03-23T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:80c97444-4748-3939-b2af-fd2d0399a5e6</id><content type="html">&lt;p&gt;I spend too much of my life sitting alone in an office working on my conputer or looking at my smartphone. My regular dose of fresh air comes from my bike - I ride to work and back regularly - but I also enjoy getting out into the garden when I can. Trouble is, I dont really &lt;em&gt;enjoy&lt;/em&gt; gardening! I do get a lot  of satisfaction from pruning the trees and shrubs, especially if it involves some climbing and as a result we now have an enormous pile of branches, leaves and twigs in the bottom of the garden. I recently found a new activity which satisfies my creative side and starts to diminish the stack o' cuttings : building 'dead hedge' style walls and fences.&lt;/p&gt;
&lt;p&gt;&lt;img src="garden03.png" alt="garden03"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="garden02.png" alt="garden02"&gt;&lt;/p&gt;
&lt;p&gt;First I sharpen a set of stakes and drive them into the ground, then I weave branches beween the stakes and finally I stuff twigs and leaves between the branches.  I always end up full of splinters with a big grin on my face.&lt;/p&gt;
&lt;p&gt;&lt;img src="garden04.png" alt="garden04"&gt;&lt;/p&gt;
&lt;h2&gt;Before and after&lt;/h2&gt;
&lt;p&gt;&lt;img src="garden05.png" alt="garden05"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="garden06.png" alt="garden06"&gt;&lt;/p&gt;
</content></entry><entry><title>Any way the wind blows</title><link href="https://grahamknapp.com/blog/any-way-the-wind-blows/" rel="alternate"></link><updated>2019-03-20T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:4255ed85-1019-3014-9501-6dcdb09ead67</id><content type="html">&lt;h3&gt;Adding leading zeros with Python&lt;/h3&gt;
&lt;p&gt;Various ways to add leading zeros to a number, for instance a wind direction, using Python.  &lt;a href="wind_zeros.ipynb"&gt;Available as a Jupyter Notebook&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Generate a list of wind directions&lt;/h3&gt;
&lt;p&gt;First some definitions. The wind direction is measured in degrees clockwise from north and represents the direction the wind is blowing &lt;strong&gt;from&lt;/strong&gt;. For instance an easterly wind, i.e. wind blowing &lt;strong&gt;from&lt;/strong&gt; the east has a direction of 90 degrees. Let's generate 16 wind directions from 0 (north) to 337.5 (north by northwest).&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;22.5&lt;/span&gt;  &lt;span class="c1"&gt;# degrees&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;directions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[0.0,&lt;/span&gt;
&lt;span class="go"&gt; 22.5,&lt;/span&gt;
&lt;span class="go"&gt; 45.0,&lt;/span&gt;
&lt;span class="go"&gt; 67.5,&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt; 337.5]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;String zfill method&lt;/h3&gt;
&lt;p&gt;No doubt the most pythonic way to add leading zeros to a bare string, the built-in &lt;code&gt;str.zfill()&lt;/code&gt; method is designed to do just that.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dir_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;    000 000.0&lt;/span&gt;
&lt;span class="go"&gt;    022 022.5&lt;/span&gt;
&lt;span class="go"&gt;    045 045.0&lt;/span&gt;
&lt;span class="go"&gt;    067 067.5&lt;/span&gt;
&lt;span class="go"&gt;    090 090.0&lt;/span&gt;
&lt;span class="go"&gt;    112 112.5&lt;/span&gt;
&lt;span class="go"&gt;    135 135.0&lt;/span&gt;
&lt;span class="go"&gt;    157 157.5&lt;/span&gt;
&lt;span class="go"&gt;    180 180.0&lt;/span&gt;
&lt;span class="go"&gt;    202 202.5&lt;/span&gt;
&lt;span class="go"&gt;    225 225.0&lt;/span&gt;
&lt;span class="go"&gt;    247 247.5&lt;/span&gt;
&lt;span class="go"&gt;    270 270.0&lt;/span&gt;
&lt;span class="go"&gt;    292 292.5&lt;/span&gt;
&lt;span class="go"&gt;    315 315.0&lt;/span&gt;
&lt;span class="go"&gt;    337 337.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can immediately see our first quirk: the integer representation truncates decimal values rather than rounding up (as I learned to do at school) or rounding towards the nearest even number (&lt;a href="https://realpython.com/python-rounding/"&gt;as the Python round() funtion would do&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;String slicing&lt;/h3&gt;
&lt;p&gt;Very fast and arguably even more readable for people with a good understanding of basic python syntax but no desire to read the docs or explore the obscure corners of the language. Add the maximum possible number of leading zeros and then slice the desired number of digits.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)))[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;    000 000.0&lt;/span&gt;
&lt;span class="go"&gt;    022 022.5&lt;/span&gt;
&lt;span class="go"&gt;    045 045.0&lt;/span&gt;
&lt;span class="go"&gt;    067 067.5&lt;/span&gt;
&lt;span class="go"&gt;    090 090.0&lt;/span&gt;
&lt;span class="go"&gt;    112 112.5&lt;/span&gt;
&lt;span class="go"&gt;    135 135.0&lt;/span&gt;
&lt;span class="go"&gt;    157 157.5&lt;/span&gt;
&lt;span class="go"&gt;    180 180.0&lt;/span&gt;
&lt;span class="go"&gt;    202 202.5&lt;/span&gt;
&lt;span class="go"&gt;    225 225.0&lt;/span&gt;
&lt;span class="go"&gt;    247 247.5&lt;/span&gt;
&lt;span class="go"&gt;    270 270.0&lt;/span&gt;
&lt;span class="go"&gt;    292 292.5&lt;/span&gt;
&lt;span class="go"&gt;    315 315.0&lt;/span&gt;
&lt;span class="go"&gt;    337 337.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;String format : integers&lt;/h3&gt;
&lt;p&gt;As part of a longer string this allows the  number to be inserted with leading zeros. Compatible with all current versions of Python.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Int: &lt;/span&gt;&lt;span class="si"&gt;{:03d}&lt;/span&gt;&lt;span class="s1"&gt; | Float: &lt;/span&gt;&lt;span class="si"&gt;{:05.1f}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;  Int: 000  |  Float: 000.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 022  |  Float: 022.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 045  |  Float: 045.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 067  |  Float: 067.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 090  |  Float: 090.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 112  |  Float: 112.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 135  |  Float: 135.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 157  |  Float: 157.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 180  |  Float: 180.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 202  |  Float: 202.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 225  |  Float: 225.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 247  |  Float: 247.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 270  |  Float: 270.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 292  |  Float: 292.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 315  |  Float: 315.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 337  |  Float: 337.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;F Strings&lt;/h3&gt;
&lt;p&gt;From Python 3.6 this is even terser.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dir_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Int: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;03d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; | Float: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dir_&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;05.1f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;  Int: 000  |  Float: 000.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 022  |  Float: 022.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 045  |  Float: 045.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 067  |  Float: 067.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 090  |  Float: 090.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 112  |  Float: 112.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 135  |  Float: 135.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 157  |  Float: 157.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 180  |  Float: 180.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 202  |  Float: 202.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 225  |  Float: 225.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 247  |  Float: 247.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 270  |  Float: 270.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 292  |  Float: 292.5&lt;/span&gt;
&lt;span class="go"&gt;  Int: 315  |  Float: 315.0&lt;/span&gt;
&lt;span class="go"&gt;  Int: 337  |  Float: 337.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Class&lt;/h3&gt;
&lt;p&gt;By overloading the built-in &lt;code&gt;__str__()&lt;/code&gt; method for the class we can create our own custom string representation of the value.&lt;/p&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Wind direction: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;05.1f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; ¬∞&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;directions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WindRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="hll"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;    Wind direction: 000.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 022.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 045.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 067.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 090.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 112.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 135.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 157.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 180.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 202.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 225.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 247.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 270.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 292.5 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 315.0 ¬∞&lt;/span&gt;
&lt;span class="go"&gt;    Wind direction: 337.5 ¬∞&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://discourse.mcneel.com/u/clement/summary"&gt;@clement&lt;/a&gt; for comments&lt;/p&gt;
</content></entry><entry><title>Building a blog</title><link href="https://grahamknapp.com/blog/first-post/" rel="alternate"></link><updated>2019-03-18T00:00:00Z</updated><author><name>Graham Knapp</name></author><id>urn:uuid:248517bf-f16c-35e9-b4f6-153079fe67aa</id><content type="html">&lt;p&gt;I have had a few ideas for content to share recently and wanted a good way to do so.  I wanted to find a good solution for blog publishing with a few criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Built using Python, editable in markdown so I can develop my skills.&lt;/li&gt;
&lt;li&gt;Simple to build and maintain - I am not a web developer and have no desire to become one.  That said, I have been &lt;a href="https://web.archive.org/web/20010520155249/http://www.fortunecity.co.uk/madchester/latin/336/"&gt;building websites&lt;/a&gt; on an amateur basis &lt;a href="https://web.archive.org/web/19981202092552/http://www.shef.ac.uk/uni/union/susoc/ftc/"&gt;since the 1990s&lt;/a&gt; so I'm not afraid of writing a little html if I have to.&lt;/li&gt;
&lt;li&gt;Capable of incorporating Jupyter Notebooks&lt;/li&gt;
&lt;li&gt;Simple to deploy, preferably for free.  I am hoping to do this via my internet provider but might go via GitHub failing that or even pay for a small cloud server.&lt;/li&gt;
&lt;li&gt;No initial need for interractive content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I saw that the static site generators Pelican and Lektor were available.  That sounds like a good solution as it should be quick and have few moving parts which could break.  &lt;a href="https://www.getlektor.com/"&gt;Lektor&lt;/a&gt; looked simple, welcoming and modern enough so I downloaded and installed it. I listened to &lt;a href="https://talkpython.fm/episodes/show/160/lektor-beautiful-websites-out-of-flat-files"&gt;Talk Python episode 160&lt;/a&gt; as I did so and that encouraged me that I was on a good path.&lt;/p&gt;
&lt;blockquote&gt;&lt;audio preload="none" controls="" id="direct_player"&gt;
                                    &lt;source src="https://talkpython.fm/episodes/download/160/lektor-beautiful-websites-out-of-flat-files.mp3" type="audio/mpeg"&gt;
                                &lt;/audio&gt;&lt;p&gt;&lt;em&gt;Listen to Talk Python Episode 160 - Lektor (2018)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My initial experience has been great - I got going with no problem except that at the time of writing I have been waiting over a week for free to get around to setting up my personal web space so I can deploy the site.  At least that has given me enough time to configure a basic blog and write my first 2 posts.&lt;/p&gt;
&lt;h4&gt;Post-deployment update&lt;/h4&gt;
&lt;p&gt;OK so I have gone for GitHub pages for hosting with a custom web domain - buying the domain name and &lt;a href="https://www.getlektor.com/docs/deployment/ghpages/#cname-support"&gt;specifying it in Lektor&lt;/a&gt; and &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site"&gt;in GitHub pages&lt;/a&gt; was enough to get it working properly with https - no need to update certificates every few months !&lt;/p&gt;
</content></entry></feed>